{"id":"../node_modules/sql-formatter/lib/core/Tokenizer.js","dependencies":[{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/package.json","includedInParent":true,"mtime":1581593944909},{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/package.json","includedInParent":true,"mtime":1580380995860},{"name":"lodash/isEmpty","loc":{"line":5,"column":23},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Tokenizer.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/lodash/isEmpty.js"},{"name":"lodash/escapeRegExp","loc":{"line":9,"column":28},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Tokenizer.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/lodash/escapeRegExp.js"},{"name":"./tokenTypes","loc":{"line":13,"column":26},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Tokenizer.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/tokenTypes.js"}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _isEmpty = require(\"lodash/isEmpty\");\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _escapeRegExp = require(\"lodash/escapeRegExp\");\n\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Tokenizer = function () {\n    /**\n     * @param {Object} cfg\n     *  @param {String[]} cfg.reservedWords Reserved words in SQL\n     *  @param {String[]} cfg.reservedToplevelWords Words that are set to new line separately\n     *  @param {String[]} cfg.reservedNewlineWords Words that are set to newline\n     *  @param {String[]} cfg.stringTypes String types to enable: \"\", '', ``, [], N''\n     *  @param {String[]} cfg.openParens Opening parentheses to enable, like (, [\n     *  @param {String[]} cfg.closeParens Closing parentheses to enable, like ), ]\n     *  @param {String[]} cfg.indexedPlaceholderTypes Prefixes for indexed placeholders, like ?\n     *  @param {String[]} cfg.namedPlaceholderTypes Prefixes for named placeholders, like @ and :\n     *  @param {String[]} cfg.lineCommentTypes Line comments to enable, like # and --\n     *  @param {String[]} cfg.specialWordChars Special chars that can be found inside of words, like @ and #\n     */\n    function Tokenizer(cfg) {\n        _classCallCheck(this, Tokenizer);\n\n        this.WHITESPACE_REGEX = /^(\\s+)/;\n        this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\\b/;\n        this.OPERATOR_REGEX = /^(!=|<>|==|<=|>=|!<|!>|\\|\\||::|->>|->|~~\\*|~~|!~~\\*|!~~|~\\*|!~\\*|!~|.)/;\n\n        this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/;\n        this.LINE_COMMENT_REGEX = this.createLineCommentRegex(cfg.lineCommentTypes);\n\n        this.RESERVED_TOPLEVEL_REGEX = this.createReservedWordRegex(cfg.reservedToplevelWords);\n        this.RESERVED_NEWLINE_REGEX = this.createReservedWordRegex(cfg.reservedNewlineWords);\n        this.RESERVED_PLAIN_REGEX = this.createReservedWordRegex(cfg.reservedWords);\n\n        this.WORD_REGEX = this.createWordRegex(cfg.specialWordChars);\n        this.STRING_REGEX = this.createStringRegex(cfg.stringTypes);\n\n        this.OPEN_PAREN_REGEX = this.createParenRegex(cfg.openParens);\n        this.CLOSE_PAREN_REGEX = this.createParenRegex(cfg.closeParens);\n\n        this.INDEXED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.indexedPlaceholderTypes, \"[0-9]*\");\n        this.IDENT_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, \"[a-zA-Z0-9._$]+\");\n        this.STRING_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, this.createStringPattern(cfg.stringTypes));\n    }\n\n    Tokenizer.prototype.createLineCommentRegex = function createLineCommentRegex(lineCommentTypes) {\n        return new RegExp(\"^((?:\" + lineCommentTypes.map(function (c) {\n            return (0, _escapeRegExp2[\"default\"])(c);\n        }).join(\"|\") + \").*?(?:\\n|$))\");\n    };\n\n    Tokenizer.prototype.createReservedWordRegex = function createReservedWordRegex(reservedWords) {\n        var reservedWordsPattern = reservedWords.join(\"|\").replace(/ /g, \"\\\\s+\");\n        return new RegExp(\"^(\" + reservedWordsPattern + \")\\\\b\", \"i\");\n    };\n\n    Tokenizer.prototype.createWordRegex = function createWordRegex() {\n        var specialChars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        return new RegExp(\"^([\\\\w\" + specialChars.join(\"\") + \"]+)\");\n    };\n\n    Tokenizer.prototype.createStringRegex = function createStringRegex(stringTypes) {\n        return new RegExp(\"^(\" + this.createStringPattern(stringTypes) + \")\");\n    };\n\n    // This enables the following string patterns:\n    // 1. backtick quoted string using `` to escape\n    // 2. square bracket quoted string (SQL Server) using ]] to escape\n    // 3. double quoted string using \"\" or \\\" to escape\n    // 4. single quoted string using '' or \\' to escape\n    // 5. national character quoted string using N'' or N\\' to escape\n\n\n    Tokenizer.prototype.createStringPattern = function createStringPattern(stringTypes) {\n        var patterns = {\n            \"``\": \"((`[^`]*($|`))+)\",\n            \"[]\": \"((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)\",\n            \"\\\"\\\"\": \"((\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*(\\\"|$))+)\",\n            \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n            \"N''\": \"((N'[^N'\\\\\\\\]*(?:\\\\\\\\.[^N'\\\\\\\\]*)*('|$))+)\"\n        };\n\n        return stringTypes.map(function (t) {\n            return patterns[t];\n        }).join(\"|\");\n    };\n\n    Tokenizer.prototype.createParenRegex = function createParenRegex(parens) {\n        var _this = this;\n\n        return new RegExp(\"^(\" + parens.map(function (p) {\n            return _this.escapeParen(p);\n        }).join(\"|\") + \")\", \"i\");\n    };\n\n    Tokenizer.prototype.escapeParen = function escapeParen(paren) {\n        if (paren.length === 1) {\n            // A single punctuation character\n            return (0, _escapeRegExp2[\"default\"])(paren);\n        } else {\n            // longer word\n            return \"\\\\b\" + paren + \"\\\\b\";\n        }\n    };\n\n    Tokenizer.prototype.createPlaceholderRegex = function createPlaceholderRegex(types, pattern) {\n        if ((0, _isEmpty2[\"default\"])(types)) {\n            return false;\n        }\n        var typesRegex = types.map(_escapeRegExp2[\"default\"]).join(\"|\");\n\n        return new RegExp(\"^((?:\" + typesRegex + \")(?:\" + pattern + \"))\");\n    };\n\n    /**\n     * Takes a SQL string and breaks it into tokens.\n     * Each token is an object with type and value.\n     *\n     * @param {String} input The SQL string\n     * @return {Object[]} tokens An array of tokens.\n     *  @return {String} token.type\n     *  @return {String} token.value\n     */\n\n\n    Tokenizer.prototype.tokenize = function tokenize(input) {\n        var tokens = [];\n        var token = void 0;\n\n        // Keep processing the string until it is empty\n        while (input.length) {\n            // Get the next token and the token type\n            token = this.getNextToken(input, token);\n            // Advance the string\n            input = input.substring(token.value.length);\n\n            tokens.push(token);\n        }\n        return tokens;\n    };\n\n    Tokenizer.prototype.getNextToken = function getNextToken(input, previousToken) {\n        return this.getWhitespaceToken(input) || this.getCommentToken(input) || this.getStringToken(input) || this.getOpenParenToken(input) || this.getCloseParenToken(input) || this.getPlaceholderToken(input) || this.getNumberToken(input) || this.getReservedWordToken(input, previousToken) || this.getWordToken(input) || this.getOperatorToken(input);\n    };\n\n    Tokenizer.prototype.getWhitespaceToken = function getWhitespaceToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WHITESPACE,\n            regex: this.WHITESPACE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCommentToken = function getCommentToken(input) {\n        return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n    };\n\n    Tokenizer.prototype.getLineCommentToken = function getLineCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].LINE_COMMENT,\n            regex: this.LINE_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getBlockCommentToken = function getBlockCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].BLOCK_COMMENT,\n            regex: this.BLOCK_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getStringToken = function getStringToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].STRING,\n            regex: this.STRING_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getOpenParenToken = function getOpenParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPEN_PAREN,\n            regex: this.OPEN_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCloseParenToken = function getCloseParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].CLOSE_PAREN,\n            regex: this.CLOSE_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderToken = function getPlaceholderToken(input) {\n        return this.getIdentNamedPlaceholderToken(input) || this.getStringNamedPlaceholderToken(input) || this.getIndexedPlaceholderToken(input);\n    };\n\n    Tokenizer.prototype.getIdentNamedPlaceholderToken = function getIdentNamedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getStringNamedPlaceholderToken = function getStringNamedPlaceholderToken(input) {\n        var _this2 = this;\n\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return _this2.getEscapedPlaceholderKey({ key: v.slice(2, -1), quoteChar: v.slice(-1) });\n            }\n        });\n    };\n\n    Tokenizer.prototype.getIndexedPlaceholderToken = function getIndexedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.INDEXED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderTokenWithKey = function getPlaceholderTokenWithKey(_ref) {\n        var input = _ref.input,\n            regex = _ref.regex,\n            parseKey = _ref.parseKey;\n\n        var token = this.getTokenOnFirstMatch({ input: input, regex: regex, type: _tokenTypes2[\"default\"].PLACEHOLDER });\n        if (token) {\n            token.key = parseKey(token.value);\n        }\n        return token;\n    };\n\n    Tokenizer.prototype.getEscapedPlaceholderKey = function getEscapedPlaceholderKey(_ref2) {\n        var key = _ref2.key,\n            quoteChar = _ref2.quoteChar;\n\n        return key.replace(new RegExp((0, _escapeRegExp2[\"default\"])(\"\\\\\") + quoteChar, \"g\"), quoteChar);\n    };\n\n    // Decimal, binary, or hex numbers\n\n\n    Tokenizer.prototype.getNumberToken = function getNumberToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].NUMBER,\n            regex: this.NUMBER_REGEX\n        });\n    };\n\n    // Punctuation and symbols\n\n\n    Tokenizer.prototype.getOperatorToken = function getOperatorToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPERATOR,\n            regex: this.OPERATOR_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getReservedWordToken = function getReservedWordToken(input, previousToken) {\n        // A reserved word cannot be preceded by a \".\"\n        // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n        if (previousToken && previousToken.value && previousToken.value === \".\") {\n            return;\n        }\n        return this.getToplevelReservedToken(input) || this.getNewlineReservedToken(input) || this.getPlainReservedToken(input);\n    };\n\n    Tokenizer.prototype.getToplevelReservedToken = function getToplevelReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_TOPLEVEL,\n            regex: this.RESERVED_TOPLEVEL_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getNewlineReservedToken = function getNewlineReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_NEWLINE,\n            regex: this.RESERVED_NEWLINE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlainReservedToken = function getPlainReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED,\n            regex: this.RESERVED_PLAIN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getWordToken = function getWordToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WORD,\n            regex: this.WORD_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getTokenOnFirstMatch = function getTokenOnFirstMatch(_ref3) {\n        var input = _ref3.input,\n            type = _ref3.type,\n            regex = _ref3.regex;\n\n        var matches = input.match(regex);\n\n        if (matches) {\n            return { type: type, value: matches[1] };\n        }\n    };\n\n    return Tokenizer;\n}();\n\nexports[\"default\"] = Tokenizer;\nmodule.exports = exports[\"default\"];"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Tokenizer.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}}],"sources":{"../node_modules/sql-formatter/lib/core/Tokenizer.js":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _isEmpty = require(\"lodash/isEmpty\");\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _escapeRegExp = require(\"lodash/escapeRegExp\");\n\nvar _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Tokenizer = function () {\n    /**\n     * @param {Object} cfg\n     *  @param {String[]} cfg.reservedWords Reserved words in SQL\n     *  @param {String[]} cfg.reservedToplevelWords Words that are set to new line separately\n     *  @param {String[]} cfg.reservedNewlineWords Words that are set to newline\n     *  @param {String[]} cfg.stringTypes String types to enable: \"\", '', ``, [], N''\n     *  @param {String[]} cfg.openParens Opening parentheses to enable, like (, [\n     *  @param {String[]} cfg.closeParens Closing parentheses to enable, like ), ]\n     *  @param {String[]} cfg.indexedPlaceholderTypes Prefixes for indexed placeholders, like ?\n     *  @param {String[]} cfg.namedPlaceholderTypes Prefixes for named placeholders, like @ and :\n     *  @param {String[]} cfg.lineCommentTypes Line comments to enable, like # and --\n     *  @param {String[]} cfg.specialWordChars Special chars that can be found inside of words, like @ and #\n     */\n    function Tokenizer(cfg) {\n        _classCallCheck(this, Tokenizer);\n\n        this.WHITESPACE_REGEX = /^(\\s+)/;\n        this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?|0x[0-9a-fA-F]+|0b[01]+)\\b/;\n        this.OPERATOR_REGEX = /^(!=|<>|==|<=|>=|!<|!>|\\|\\||::|->>|->|~~\\*|~~|!~~\\*|!~~|~\\*|!~\\*|!~|.)/;\n\n        this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/;\n        this.LINE_COMMENT_REGEX = this.createLineCommentRegex(cfg.lineCommentTypes);\n\n        this.RESERVED_TOPLEVEL_REGEX = this.createReservedWordRegex(cfg.reservedToplevelWords);\n        this.RESERVED_NEWLINE_REGEX = this.createReservedWordRegex(cfg.reservedNewlineWords);\n        this.RESERVED_PLAIN_REGEX = this.createReservedWordRegex(cfg.reservedWords);\n\n        this.WORD_REGEX = this.createWordRegex(cfg.specialWordChars);\n        this.STRING_REGEX = this.createStringRegex(cfg.stringTypes);\n\n        this.OPEN_PAREN_REGEX = this.createParenRegex(cfg.openParens);\n        this.CLOSE_PAREN_REGEX = this.createParenRegex(cfg.closeParens);\n\n        this.INDEXED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.indexedPlaceholderTypes, \"[0-9]*\");\n        this.IDENT_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, \"[a-zA-Z0-9._$]+\");\n        this.STRING_NAMED_PLACEHOLDER_REGEX = this.createPlaceholderRegex(cfg.namedPlaceholderTypes, this.createStringPattern(cfg.stringTypes));\n    }\n\n    Tokenizer.prototype.createLineCommentRegex = function createLineCommentRegex(lineCommentTypes) {\n        return new RegExp(\"^((?:\" + lineCommentTypes.map(function (c) {\n            return (0, _escapeRegExp2[\"default\"])(c);\n        }).join(\"|\") + \").*?(?:\\n|$))\");\n    };\n\n    Tokenizer.prototype.createReservedWordRegex = function createReservedWordRegex(reservedWords) {\n        var reservedWordsPattern = reservedWords.join(\"|\").replace(/ /g, \"\\\\s+\");\n        return new RegExp(\"^(\" + reservedWordsPattern + \")\\\\b\", \"i\");\n    };\n\n    Tokenizer.prototype.createWordRegex = function createWordRegex() {\n        var specialChars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n        return new RegExp(\"^([\\\\w\" + specialChars.join(\"\") + \"]+)\");\n    };\n\n    Tokenizer.prototype.createStringRegex = function createStringRegex(stringTypes) {\n        return new RegExp(\"^(\" + this.createStringPattern(stringTypes) + \")\");\n    };\n\n    // This enables the following string patterns:\n    // 1. backtick quoted string using `` to escape\n    // 2. square bracket quoted string (SQL Server) using ]] to escape\n    // 3. double quoted string using \"\" or \\\" to escape\n    // 4. single quoted string using '' or \\' to escape\n    // 5. national character quoted string using N'' or N\\' to escape\n\n\n    Tokenizer.prototype.createStringPattern = function createStringPattern(stringTypes) {\n        var patterns = {\n            \"``\": \"((`[^`]*($|`))+)\",\n            \"[]\": \"((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)\",\n            \"\\\"\\\"\": \"((\\\"[^\\\"\\\\\\\\]*(?:\\\\\\\\.[^\\\"\\\\\\\\]*)*(\\\"|$))+)\",\n            \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n            \"N''\": \"((N'[^N'\\\\\\\\]*(?:\\\\\\\\.[^N'\\\\\\\\]*)*('|$))+)\"\n        };\n\n        return stringTypes.map(function (t) {\n            return patterns[t];\n        }).join(\"|\");\n    };\n\n    Tokenizer.prototype.createParenRegex = function createParenRegex(parens) {\n        var _this = this;\n\n        return new RegExp(\"^(\" + parens.map(function (p) {\n            return _this.escapeParen(p);\n        }).join(\"|\") + \")\", \"i\");\n    };\n\n    Tokenizer.prototype.escapeParen = function escapeParen(paren) {\n        if (paren.length === 1) {\n            // A single punctuation character\n            return (0, _escapeRegExp2[\"default\"])(paren);\n        } else {\n            // longer word\n            return \"\\\\b\" + paren + \"\\\\b\";\n        }\n    };\n\n    Tokenizer.prototype.createPlaceholderRegex = function createPlaceholderRegex(types, pattern) {\n        if ((0, _isEmpty2[\"default\"])(types)) {\n            return false;\n        }\n        var typesRegex = types.map(_escapeRegExp2[\"default\"]).join(\"|\");\n\n        return new RegExp(\"^((?:\" + typesRegex + \")(?:\" + pattern + \"))\");\n    };\n\n    /**\n     * Takes a SQL string and breaks it into tokens.\n     * Each token is an object with type and value.\n     *\n     * @param {String} input The SQL string\n     * @return {Object[]} tokens An array of tokens.\n     *  @return {String} token.type\n     *  @return {String} token.value\n     */\n\n\n    Tokenizer.prototype.tokenize = function tokenize(input) {\n        var tokens = [];\n        var token = void 0;\n\n        // Keep processing the string until it is empty\n        while (input.length) {\n            // Get the next token and the token type\n            token = this.getNextToken(input, token);\n            // Advance the string\n            input = input.substring(token.value.length);\n\n            tokens.push(token);\n        }\n        return tokens;\n    };\n\n    Tokenizer.prototype.getNextToken = function getNextToken(input, previousToken) {\n        return this.getWhitespaceToken(input) || this.getCommentToken(input) || this.getStringToken(input) || this.getOpenParenToken(input) || this.getCloseParenToken(input) || this.getPlaceholderToken(input) || this.getNumberToken(input) || this.getReservedWordToken(input, previousToken) || this.getWordToken(input) || this.getOperatorToken(input);\n    };\n\n    Tokenizer.prototype.getWhitespaceToken = function getWhitespaceToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WHITESPACE,\n            regex: this.WHITESPACE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCommentToken = function getCommentToken(input) {\n        return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n    };\n\n    Tokenizer.prototype.getLineCommentToken = function getLineCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].LINE_COMMENT,\n            regex: this.LINE_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getBlockCommentToken = function getBlockCommentToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].BLOCK_COMMENT,\n            regex: this.BLOCK_COMMENT_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getStringToken = function getStringToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].STRING,\n            regex: this.STRING_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getOpenParenToken = function getOpenParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPEN_PAREN,\n            regex: this.OPEN_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getCloseParenToken = function getCloseParenToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].CLOSE_PAREN,\n            regex: this.CLOSE_PAREN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderToken = function getPlaceholderToken(input) {\n        return this.getIdentNamedPlaceholderToken(input) || this.getStringNamedPlaceholderToken(input) || this.getIndexedPlaceholderToken(input);\n    };\n\n    Tokenizer.prototype.getIdentNamedPlaceholderToken = function getIdentNamedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getStringNamedPlaceholderToken = function getStringNamedPlaceholderToken(input) {\n        var _this2 = this;\n\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return _this2.getEscapedPlaceholderKey({ key: v.slice(2, -1), quoteChar: v.slice(-1) });\n            }\n        });\n    };\n\n    Tokenizer.prototype.getIndexedPlaceholderToken = function getIndexedPlaceholderToken(input) {\n        return this.getPlaceholderTokenWithKey({\n            input: input,\n            regex: this.INDEXED_PLACEHOLDER_REGEX,\n            parseKey: function parseKey(v) {\n                return v.slice(1);\n            }\n        });\n    };\n\n    Tokenizer.prototype.getPlaceholderTokenWithKey = function getPlaceholderTokenWithKey(_ref) {\n        var input = _ref.input,\n            regex = _ref.regex,\n            parseKey = _ref.parseKey;\n\n        var token = this.getTokenOnFirstMatch({ input: input, regex: regex, type: _tokenTypes2[\"default\"].PLACEHOLDER });\n        if (token) {\n            token.key = parseKey(token.value);\n        }\n        return token;\n    };\n\n    Tokenizer.prototype.getEscapedPlaceholderKey = function getEscapedPlaceholderKey(_ref2) {\n        var key = _ref2.key,\n            quoteChar = _ref2.quoteChar;\n\n        return key.replace(new RegExp((0, _escapeRegExp2[\"default\"])(\"\\\\\") + quoteChar, \"g\"), quoteChar);\n    };\n\n    // Decimal, binary, or hex numbers\n\n\n    Tokenizer.prototype.getNumberToken = function getNumberToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].NUMBER,\n            regex: this.NUMBER_REGEX\n        });\n    };\n\n    // Punctuation and symbols\n\n\n    Tokenizer.prototype.getOperatorToken = function getOperatorToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].OPERATOR,\n            regex: this.OPERATOR_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getReservedWordToken = function getReservedWordToken(input, previousToken) {\n        // A reserved word cannot be preceded by a \".\"\n        // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n        if (previousToken && previousToken.value && previousToken.value === \".\") {\n            return;\n        }\n        return this.getToplevelReservedToken(input) || this.getNewlineReservedToken(input) || this.getPlainReservedToken(input);\n    };\n\n    Tokenizer.prototype.getToplevelReservedToken = function getToplevelReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_TOPLEVEL,\n            regex: this.RESERVED_TOPLEVEL_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getNewlineReservedToken = function getNewlineReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED_NEWLINE,\n            regex: this.RESERVED_NEWLINE_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getPlainReservedToken = function getPlainReservedToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].RESERVED,\n            regex: this.RESERVED_PLAIN_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getWordToken = function getWordToken(input) {\n        return this.getTokenOnFirstMatch({\n            input: input,\n            type: _tokenTypes2[\"default\"].WORD,\n            regex: this.WORD_REGEX\n        });\n    };\n\n    Tokenizer.prototype.getTokenOnFirstMatch = function getTokenOnFirstMatch(_ref3) {\n        var input = _ref3.input,\n            type = _ref3.type,\n            regex = _ref3.regex;\n\n        var matches = input.match(regex);\n\n        if (matches) {\n            return { type: type, value: matches[1] };\n        }\n    };\n\n    return Tokenizer;\n}();\n\nexports[\"default\"] = Tokenizer;\nmodule.exports = exports[\"default\"];"},"lineCount":347}},"error":null,"hash":"3c187e6a2293941d6c1cf85b4849c2bd","cacheData":{"env":{}}}