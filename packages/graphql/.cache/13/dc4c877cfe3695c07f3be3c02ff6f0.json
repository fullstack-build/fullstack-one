{"id":"../node_modules/@fullstack-one/core/dist/index.js","dependencies":[{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/package.json","includedInParent":true,"mtime":1581588025807},{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/core/package.json","includedInParent":true,"mtime":1581593829119},{"name":"@fullstack-one/di","loc":{"line":23,"column":21},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/core/dist/index.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/di/index.js"},{"name":"@fullstack-one/logger","loc":{"line":24,"column":25},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/core/dist/index.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/logger/index.js"},{"name":"./interfaces","loc":{"line":25,"column":29},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/core/dist/index.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/core/dist/interfaces.js"},{"name":"./helpers","loc":{"line":26,"column":26},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/core/dist/index.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/@fullstack-one/core/dist/helpers.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst di_1 = require(\"@fullstack-one/di\");\nconst logger_1 = require(\"@fullstack-one/logger\");\nconst interfaces_1 = require(\"./interfaces\");\nconst helpers_1 = require(\"./helpers\");\nvar EBootState;\n(function (EBootState) {\n    EBootState[\"Initial\"] = \"initial\";\n    EBootState[\"Booting\"] = \"booting\";\n    EBootState[\"Finished\"] = \"finished\";\n})(EBootState = exports.EBootState || (exports.EBootState = {}));\nlet Core = class Core {\n    constructor(loggerFactory) {\n        this.state = EBootState.Initial;\n        this.modules = [];\n        this.logger = loggerFactory.create(this.constructor.name);\n    }\n    getBootState() {\n        return this.state;\n    }\n    isBooting() {\n        return this.state === EBootState.Booting;\n    }\n    hasBooted() {\n        return this.state === EBootState.Finished;\n    }\n    addCoreFunctions(moduleCoreFunctions) {\n        this.logger.trace(\"addCoreFunctions\", moduleCoreFunctions.key);\n        this.modules.push(moduleCoreFunctions);\n    }\n    generateMigration(version, appConfig, envKey, dbPool, throwErrorOnInfiniteMigration = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // 1) Generate commands for the first time\n            console.log('FIRST RUN');\n            const firstDbClient = yield dbPool.connect();\n            let firstGenerationResult;\n            try {\n                firstDbClient.query(\"BEGIN;\");\n                firstGenerationResult = yield this.generateModuleMigrations(version, appConfig, envKey, firstDbClient);\n                yield firstDbClient.query(\"ROLLBACK;\");\n            }\n            catch (err) {\n                yield firstDbClient.query(\"ROLLBACK;\");\n                return {\n                    errors: [{\n                            message: \"Failed to generate migration commands.\",\n                            error: err,\n                        }],\n                    warnings: [],\n                    commands: []\n                };\n            }\n            finally {\n                firstDbClient.release();\n            }\n            // If there are errors, or there is nothing to do, just return here\n            if (firstGenerationResult.errors.length > 0 || firstGenerationResult.commands.length < 1) {\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            // 2) Try to run the migration\n            const secondDbClient = yield dbPool.connect();\n            let secondGenerationResult;\n            console.log('RUN MIG');\n            try {\n                secondDbClient.query(\"BEGIN;\");\n                yield helpers_1.asyncForEach(firstGenerationResult.commands, (command, commandIndex) => __awaiter(this, void 0, void 0, function* () {\n                    yield helpers_1.asyncForEach(command.sqls, (sql, sqlIndex) => __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            yield secondDbClient.query(sql);\n                        }\n                        catch (err) {\n                            firstGenerationResult.errors.push({\n                                message: `Failed to run query [${commandIndex}.${sqlIndex}]: [${sql}]`,\n                                error: err\n                            });\n                            throw err;\n                        }\n                    }));\n                }));\n                // 3) try to generate the commands again to check if there are any infinite-migrations\n                console.log('SECOND RUN');\n                try {\n                    secondGenerationResult = yield this.generateModuleMigrations(version, appConfig, envKey, secondDbClient);\n                }\n                catch (err) {\n                    firstGenerationResult.errors.push({\n                        message: `Failed to generate second migration commands.`,\n                        error: err\n                    });\n                    throw err;\n                }\n                yield secondDbClient.query(\"ROLLBACK;\");\n            }\n            catch (err) {\n                yield secondDbClient.query(\"ROLLBACK;\");\n                if (firstGenerationResult.errors.length < 1) {\n                    firstGenerationResult.errors.push({\n                        message: \"Failed to run migrations and second command generation\",\n                        error: err\n                    });\n                }\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            finally {\n                secondDbClient.release();\n            }\n            // When we got any errors in second run inform the user and return with error\n            if (secondGenerationResult.errors.length > 0) {\n                firstGenerationResult.errors.push({\n                    message: \"Second migration-command generation finished with errors. Adding them next, prefixed with 2).\"\n                });\n                secondGenerationResult.errors.forEach((error) => {\n                    firstGenerationResult.errors.push(Object.assign({}, error, { message: `2) ${error.message}` }));\n                });\n                return firstGenerationResult;\n            }\n            // If there are no commands in the second migration and we came here without an error, the migration is fine\n            if (secondGenerationResult.commands.length < 1) {\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            firstGenerationResult.autoAppConfigFixes = [];\n            // When there are commands in second migration this is an infinite-migration\n            // Check if we can auto-fix them\n            secondGenerationResult.commands.forEach((command) => {\n                if (command.autoAppConfigFixes != null) {\n                    command.autoAppConfigFixes.forEach((autoSchemaFix) => {\n                        firstGenerationResult.autoAppConfigFixes.push(autoSchemaFix);\n                    });\n                    firstGenerationResult.warnings.push({\n                        message: \"Your appConfig leads to infinite-migrations. Trying to auto-fix. If this fails, please check the command:\",\n                        command\n                    });\n                }\n                else {\n                    firstGenerationResult.errors.push({\n                        message: \"Your appConfig leads to infinite-migrations. Please check the command:\",\n                        command\n                    });\n                }\n            });\n            // Apply the auto-fixes to a new appConfig\n            try {\n                firstGenerationResult.fixedAppConfig = helpers_1.applyAutoAppConfigFixes(appConfig, firstGenerationResult.autoAppConfigFixes);\n            }\n            catch (err) {\n                firstGenerationResult.errors.push({\n                    message: \"Your appConfig leads to infinite-migrations. Auto-fix failed:\",\n                    error: err\n                });\n            }\n            // If something failed until here, just return the errors\n            if (firstGenerationResult.errors.length > 0) {\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            // If the auto-fix is disabled just return the errors\n            if (throwErrorOnInfiniteMigration === true) {\n                firstGenerationResult.errors.push({\n                    message: \"Your appConfig leads to infinite-migrations. Auto-fix disabled.\"\n                });\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            let thirdMigrationResult;\n            // Try to re-run the migration with fixes, to see if they worked\n            try {\n                thirdMigrationResult = yield this.generateMigration(version, firstGenerationResult.fixedAppConfig, envKey, dbPool, true);\n                if (thirdMigrationResult.errors.length > 0) {\n                    throw new Error(\"Result contains errors\");\n                }\n            }\n            catch (e) {\n                firstGenerationResult.errors.push({\n                    message: \"Your appConfig leads to infinite-migrations. Auto-fix tried but not working.\"\n                });\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            // If we come here the migration would run infinite, but could get auto-fixed\n            thirdMigrationResult.warnings.push({\n                message: \"Your appConfig leads to infinite-migrations. It has been auto-fixed. You can remove this warning by applying the auto-fixes to your appConfig or taking the fixed appConfig.\"\n            });\n            thirdMigrationResult.fixedAppConfig = firstGenerationResult.fixedAppConfig;\n            thirdMigrationResult.autoAppConfigFixes = firstGenerationResult.autoAppConfigFixes;\n            return helpers_1.castMigrationResult(thirdMigrationResult);\n        });\n    }\n    boot() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.state = EBootState.Booting;\n            try {\n                for (const moduleObject of this.modules) {\n                    this.logger.trace(\"boot.bootFunctions.start\", moduleObject.key);\n                    yield moduleObject.boot(null, null);\n                    this.logger.trace(\"boot.bootFunctions.end\", moduleObject.key);\n                }\n            }\n            catch (err) {\n                this.logger.error(`BootLoader.boot.error.caught: ${err}\\n`);\n                throw err;\n            }\n        });\n    }\n    generateModuleMigrations(version, appConfig, envKey, pgClient) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result = {\n                runtimeConfig: {},\n                errors: [],\n                warnings: [],\n                commands: []\n            };\n            yield helpers_1.asyncForEach(appConfig.modules, (moduleConfig) => __awaiter(this, void 0, void 0, function* () {\n                const moduleCoreFunctions = this.getModuleCoreFunctionsByKey(moduleConfig.key);\n                if (moduleCoreFunctions == null) {\n                    result.errors.push({\n                        message: `The module with key '${moduleConfig.key}' does not exist on this system.`\n                    });\n                }\n                else {\n                    const moduleEnvConfig = moduleConfig.envConfig[envKey] || {};\n                    if (moduleCoreFunctions.migrate != null) {\n                        const moduleMigrationResult = yield moduleCoreFunctions.migrate(moduleConfig.appConfig, moduleEnvConfig, pgClient);\n                        result.runtimeConfig[moduleConfig.key] = moduleMigrationResult.runtimeConfig;\n                        moduleMigrationResult.errors.forEach((error) => {\n                            error.moduleKey = moduleConfig.key;\n                            result.errors.push(error);\n                        });\n                        moduleMigrationResult.warnings.forEach((warning) => {\n                            warning.moduleKey = moduleConfig.key;\n                            result.warnings.push(warning);\n                        });\n                        moduleMigrationResult.commands.forEach((command) => {\n                            command.moduleKey = moduleConfig.key;\n                            result.commands.push(command);\n                        });\n                    }\n                }\n            }));\n            result = yield this.generateCoreMigrations(version, appConfig, envKey, pgClient, result);\n            result.commands = result.commands.sort((a, b) => { return a.operationSortPosition - b.operationSortPosition; });\n            return result;\n        });\n    }\n    generateCoreMigrations(version, appConfig, envKey, pgClient, migrationResult) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentSchemaNames = yield helpers_1.getSchemas(pgClient);\n            const currentTableNames = yield helpers_1.getTables(pgClient, [\"_meta\"]);\n            if (currentSchemaNames.indexOf(\"_meta\") < 0) {\n                migrationResult.commands.push({\n                    sqls: [`CREATE SCHEMA ${helpers_1.getPgSelector(\"_meta\")};`],\n                    operationSortPosition: interfaces_1.OPERATION_SORT_POSITION.CREATE_SCHEMA\n                });\n            }\n            if (currentTableNames.indexOf(\"CoreMigrations\") < 0) {\n                migrationResult.commands.push({\n                    sqls: [`\n          CREATE TABLE \"_meta\".\"CoreMigrations\" (\n            \"id\" uuid DEFAULT uuid_generate_v4(),\n            \"version\" text NOT NULL,\n            \"appConfig\" json NOT NULL,\n            \"runtimeConfig\" json NOT NULL,\n            \"createdAt\" timestamp without time zone NOT NULL DEFAULT timezone('UTC'::text, now()),\n            PRIMARY KEY (\"id\"),\n            UNIQUE (\"version\")\n          );\n        `],\n                    operationSortPosition: interfaces_1.OPERATION_SORT_POSITION.CREATE_TABLE\n                });\n            }\n            migrationResult.commands.push({\n                sqls: [`\n        INSERT INTO \"_meta\".\"CoreMigrations\"(\"version\", \"appConfig\", \"runtimeConfig\") \n        VALUES('${version}', '${JSON.stringify(appConfig)}', '${JSON.stringify(migrationResult.runtimeConfig)}');\n      `],\n                operationSortPosition: interfaces_1.OPERATION_SORT_POSITION.INSERT_DATA\n            });\n            return migrationResult;\n        });\n    }\n    getModuleCoreFunctionsByKey(key) {\n        for (let i in this.modules) {\n            if (this.modules[i].key === key) {\n                return this.modules[i];\n            }\n        }\n        return null;\n    }\n};\nCore = __decorate([\n    di_1.Service(),\n    __param(0, di_1.Inject((type) => logger_1.LoggerFactory)),\n    __metadata(\"design:paramtypes\", [logger_1.LoggerFactory])\n], Core);\nexports.Core = Core;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/@fullstack-one/core/dist/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}}],"sources":{"../node_modules/@fullstack-one/core/dist/index.js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst di_1 = require(\"@fullstack-one/di\");\nconst logger_1 = require(\"@fullstack-one/logger\");\nconst interfaces_1 = require(\"./interfaces\");\nconst helpers_1 = require(\"./helpers\");\nvar EBootState;\n(function (EBootState) {\n    EBootState[\"Initial\"] = \"initial\";\n    EBootState[\"Booting\"] = \"booting\";\n    EBootState[\"Finished\"] = \"finished\";\n})(EBootState = exports.EBootState || (exports.EBootState = {}));\nlet Core = class Core {\n    constructor(loggerFactory) {\n        this.state = EBootState.Initial;\n        this.modules = [];\n        this.logger = loggerFactory.create(this.constructor.name);\n    }\n    getBootState() {\n        return this.state;\n    }\n    isBooting() {\n        return this.state === EBootState.Booting;\n    }\n    hasBooted() {\n        return this.state === EBootState.Finished;\n    }\n    addCoreFunctions(moduleCoreFunctions) {\n        this.logger.trace(\"addCoreFunctions\", moduleCoreFunctions.key);\n        this.modules.push(moduleCoreFunctions);\n    }\n    generateMigration(version, appConfig, envKey, dbPool, throwErrorOnInfiniteMigration = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // 1) Generate commands for the first time\n            console.log('FIRST RUN');\n            const firstDbClient = yield dbPool.connect();\n            let firstGenerationResult;\n            try {\n                firstDbClient.query(\"BEGIN;\");\n                firstGenerationResult = yield this.generateModuleMigrations(version, appConfig, envKey, firstDbClient);\n                yield firstDbClient.query(\"ROLLBACK;\");\n            }\n            catch (err) {\n                yield firstDbClient.query(\"ROLLBACK;\");\n                return {\n                    errors: [{\n                            message: \"Failed to generate migration commands.\",\n                            error: err,\n                        }],\n                    warnings: [],\n                    commands: []\n                };\n            }\n            finally {\n                firstDbClient.release();\n            }\n            // If there are errors, or there is nothing to do, just return here\n            if (firstGenerationResult.errors.length > 0 || firstGenerationResult.commands.length < 1) {\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            // 2) Try to run the migration\n            const secondDbClient = yield dbPool.connect();\n            let secondGenerationResult;\n            console.log('RUN MIG');\n            try {\n                secondDbClient.query(\"BEGIN;\");\n                yield helpers_1.asyncForEach(firstGenerationResult.commands, (command, commandIndex) => __awaiter(this, void 0, void 0, function* () {\n                    yield helpers_1.asyncForEach(command.sqls, (sql, sqlIndex) => __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            yield secondDbClient.query(sql);\n                        }\n                        catch (err) {\n                            firstGenerationResult.errors.push({\n                                message: `Failed to run query [${commandIndex}.${sqlIndex}]: [${sql}]`,\n                                error: err\n                            });\n                            throw err;\n                        }\n                    }));\n                }));\n                // 3) try to generate the commands again to check if there are any infinite-migrations\n                console.log('SECOND RUN');\n                try {\n                    secondGenerationResult = yield this.generateModuleMigrations(version, appConfig, envKey, secondDbClient);\n                }\n                catch (err) {\n                    firstGenerationResult.errors.push({\n                        message: `Failed to generate second migration commands.`,\n                        error: err\n                    });\n                    throw err;\n                }\n                yield secondDbClient.query(\"ROLLBACK;\");\n            }\n            catch (err) {\n                yield secondDbClient.query(\"ROLLBACK;\");\n                if (firstGenerationResult.errors.length < 1) {\n                    firstGenerationResult.errors.push({\n                        message: \"Failed to run migrations and second command generation\",\n                        error: err\n                    });\n                }\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            finally {\n                secondDbClient.release();\n            }\n            // When we got any errors in second run inform the user and return with error\n            if (secondGenerationResult.errors.length > 0) {\n                firstGenerationResult.errors.push({\n                    message: \"Second migration-command generation finished with errors. Adding them next, prefixed with 2).\"\n                });\n                secondGenerationResult.errors.forEach((error) => {\n                    firstGenerationResult.errors.push(Object.assign({}, error, { message: `2) ${error.message}` }));\n                });\n                return firstGenerationResult;\n            }\n            // If there are no commands in the second migration and we came here without an error, the migration is fine\n            if (secondGenerationResult.commands.length < 1) {\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            firstGenerationResult.autoAppConfigFixes = [];\n            // When there are commands in second migration this is an infinite-migration\n            // Check if we can auto-fix them\n            secondGenerationResult.commands.forEach((command) => {\n                if (command.autoAppConfigFixes != null) {\n                    command.autoAppConfigFixes.forEach((autoSchemaFix) => {\n                        firstGenerationResult.autoAppConfigFixes.push(autoSchemaFix);\n                    });\n                    firstGenerationResult.warnings.push({\n                        message: \"Your appConfig leads to infinite-migrations. Trying to auto-fix. If this fails, please check the command:\",\n                        command\n                    });\n                }\n                else {\n                    firstGenerationResult.errors.push({\n                        message: \"Your appConfig leads to infinite-migrations. Please check the command:\",\n                        command\n                    });\n                }\n            });\n            // Apply the auto-fixes to a new appConfig\n            try {\n                firstGenerationResult.fixedAppConfig = helpers_1.applyAutoAppConfigFixes(appConfig, firstGenerationResult.autoAppConfigFixes);\n            }\n            catch (err) {\n                firstGenerationResult.errors.push({\n                    message: \"Your appConfig leads to infinite-migrations. Auto-fix failed:\",\n                    error: err\n                });\n            }\n            // If something failed until here, just return the errors\n            if (firstGenerationResult.errors.length > 0) {\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            // If the auto-fix is disabled just return the errors\n            if (throwErrorOnInfiniteMigration === true) {\n                firstGenerationResult.errors.push({\n                    message: \"Your appConfig leads to infinite-migrations. Auto-fix disabled.\"\n                });\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            let thirdMigrationResult;\n            // Try to re-run the migration with fixes, to see if they worked\n            try {\n                thirdMigrationResult = yield this.generateMigration(version, firstGenerationResult.fixedAppConfig, envKey, dbPool, true);\n                if (thirdMigrationResult.errors.length > 0) {\n                    throw new Error(\"Result contains errors\");\n                }\n            }\n            catch (e) {\n                firstGenerationResult.errors.push({\n                    message: \"Your appConfig leads to infinite-migrations. Auto-fix tried but not working.\"\n                });\n                return helpers_1.castMigrationResult(firstGenerationResult);\n            }\n            // If we come here the migration would run infinite, but could get auto-fixed\n            thirdMigrationResult.warnings.push({\n                message: \"Your appConfig leads to infinite-migrations. It has been auto-fixed. You can remove this warning by applying the auto-fixes to your appConfig or taking the fixed appConfig.\"\n            });\n            thirdMigrationResult.fixedAppConfig = firstGenerationResult.fixedAppConfig;\n            thirdMigrationResult.autoAppConfigFixes = firstGenerationResult.autoAppConfigFixes;\n            return helpers_1.castMigrationResult(thirdMigrationResult);\n        });\n    }\n    boot() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.state = EBootState.Booting;\n            try {\n                for (const moduleObject of this.modules) {\n                    this.logger.trace(\"boot.bootFunctions.start\", moduleObject.key);\n                    yield moduleObject.boot(null, null);\n                    this.logger.trace(\"boot.bootFunctions.end\", moduleObject.key);\n                }\n            }\n            catch (err) {\n                this.logger.error(`BootLoader.boot.error.caught: ${err}\\n`);\n                throw err;\n            }\n        });\n    }\n    generateModuleMigrations(version, appConfig, envKey, pgClient) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let result = {\n                runtimeConfig: {},\n                errors: [],\n                warnings: [],\n                commands: []\n            };\n            yield helpers_1.asyncForEach(appConfig.modules, (moduleConfig) => __awaiter(this, void 0, void 0, function* () {\n                const moduleCoreFunctions = this.getModuleCoreFunctionsByKey(moduleConfig.key);\n                if (moduleCoreFunctions == null) {\n                    result.errors.push({\n                        message: `The module with key '${moduleConfig.key}' does not exist on this system.`\n                    });\n                }\n                else {\n                    const moduleEnvConfig = moduleConfig.envConfig[envKey] || {};\n                    if (moduleCoreFunctions.migrate != null) {\n                        const moduleMigrationResult = yield moduleCoreFunctions.migrate(moduleConfig.appConfig, moduleEnvConfig, pgClient);\n                        result.runtimeConfig[moduleConfig.key] = moduleMigrationResult.runtimeConfig;\n                        moduleMigrationResult.errors.forEach((error) => {\n                            error.moduleKey = moduleConfig.key;\n                            result.errors.push(error);\n                        });\n                        moduleMigrationResult.warnings.forEach((warning) => {\n                            warning.moduleKey = moduleConfig.key;\n                            result.warnings.push(warning);\n                        });\n                        moduleMigrationResult.commands.forEach((command) => {\n                            command.moduleKey = moduleConfig.key;\n                            result.commands.push(command);\n                        });\n                    }\n                }\n            }));\n            result = yield this.generateCoreMigrations(version, appConfig, envKey, pgClient, result);\n            result.commands = result.commands.sort((a, b) => { return a.operationSortPosition - b.operationSortPosition; });\n            return result;\n        });\n    }\n    generateCoreMigrations(version, appConfig, envKey, pgClient, migrationResult) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentSchemaNames = yield helpers_1.getSchemas(pgClient);\n            const currentTableNames = yield helpers_1.getTables(pgClient, [\"_meta\"]);\n            if (currentSchemaNames.indexOf(\"_meta\") < 0) {\n                migrationResult.commands.push({\n                    sqls: [`CREATE SCHEMA ${helpers_1.getPgSelector(\"_meta\")};`],\n                    operationSortPosition: interfaces_1.OPERATION_SORT_POSITION.CREATE_SCHEMA\n                });\n            }\n            if (currentTableNames.indexOf(\"CoreMigrations\") < 0) {\n                migrationResult.commands.push({\n                    sqls: [`\n          CREATE TABLE \"_meta\".\"CoreMigrations\" (\n            \"id\" uuid DEFAULT uuid_generate_v4(),\n            \"version\" text NOT NULL,\n            \"appConfig\" json NOT NULL,\n            \"runtimeConfig\" json NOT NULL,\n            \"createdAt\" timestamp without time zone NOT NULL DEFAULT timezone('UTC'::text, now()),\n            PRIMARY KEY (\"id\"),\n            UNIQUE (\"version\")\n          );\n        `],\n                    operationSortPosition: interfaces_1.OPERATION_SORT_POSITION.CREATE_TABLE\n                });\n            }\n            migrationResult.commands.push({\n                sqls: [`\n        INSERT INTO \"_meta\".\"CoreMigrations\"(\"version\", \"appConfig\", \"runtimeConfig\") \n        VALUES('${version}', '${JSON.stringify(appConfig)}', '${JSON.stringify(migrationResult.runtimeConfig)}');\n      `],\n                operationSortPosition: interfaces_1.OPERATION_SORT_POSITION.INSERT_DATA\n            });\n            return migrationResult;\n        });\n    }\n    getModuleCoreFunctionsByKey(key) {\n        for (let i in this.modules) {\n            if (this.modules[i].key === key) {\n                return this.modules[i];\n            }\n        }\n        return null;\n    }\n};\nCore = __decorate([\n    di_1.Service(),\n    __param(0, di_1.Inject((type) => logger_1.LoggerFactory)),\n    __metadata(\"design:paramtypes\", [logger_1.LoggerFactory])\n], Core);\nexports.Core = Core;\n"},"lineCount":313}},"error":null,"hash":"223abe6f8bfddcd6f379c78f3d4eae3a","cacheData":{"env":{}}}