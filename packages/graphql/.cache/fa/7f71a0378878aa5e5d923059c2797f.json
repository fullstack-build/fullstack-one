{"id":"../node_modules/sql-formatter/lib/core/Formatter.js","dependencies":[{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/package.json","includedInParent":true,"mtime":1581593944909},{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/package.json","includedInParent":true,"mtime":1580380995860},{"name":"lodash/trimEnd","loc":{"line":5,"column":23},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Formatter.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/lodash/trimEnd.js"},{"name":"./tokenTypes","loc":{"line":9,"column":26},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Formatter.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/tokenTypes.js"},{"name":"./Indentation","loc":{"line":13,"column":27},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Formatter.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Indentation.js"},{"name":"./InlineBlock","loc":{"line":17,"column":27},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Formatter.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/InlineBlock.js"},{"name":"./Params","loc":{"line":21,"column":22},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Formatter.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/sql-formatter/lib/core/Params.js"}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _trimEnd = require(\"lodash/trimEnd\");\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nvar _Indentation = require(\"./Indentation\");\n\nvar _Indentation2 = _interopRequireDefault(_Indentation);\n\nvar _InlineBlock = require(\"./InlineBlock\");\n\nvar _InlineBlock2 = _interopRequireDefault(_InlineBlock);\n\nvar _Params = require(\"./Params\");\n\nvar _Params2 = _interopRequireDefault(_Params);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Formatter = function () {\n    /**\n     * @param {Object} cfg\n     *   @param {Object} cfg.indent\n     *   @param {Object} cfg.params\n     * @param {Tokenizer} tokenizer\n     */\n    function Formatter(cfg, tokenizer) {\n        _classCallCheck(this, Formatter);\n\n        this.cfg = cfg || {};\n        this.indentation = new _Indentation2[\"default\"](this.cfg.indent);\n        this.inlineBlock = new _InlineBlock2[\"default\"]();\n        this.params = new _Params2[\"default\"](this.cfg.params);\n        this.tokenizer = tokenizer;\n        this.previousReservedWord = {};\n        this.tokens = [];\n        this.index = 0;\n    }\n\n    /**\n     * Formats whitespaces in a SQL string to make it easier to read.\n     *\n     * @param {String} query The SQL query string\n     * @return {String} formatted query\n     */\n\n\n    Formatter.prototype.format = function format(query) {\n        this.tokens = this.tokenizer.tokenize(query);\n        var formattedQuery = this.getFormattedQueryFromTokens();\n\n        return formattedQuery.trim();\n    };\n\n    Formatter.prototype.getFormattedQueryFromTokens = function getFormattedQueryFromTokens() {\n        var _this = this;\n\n        var formattedQuery = \"\";\n\n        this.tokens.forEach(function (token, index) {\n            _this.index = index;\n\n            if (token.type === _tokenTypes2[\"default\"].WHITESPACE) {\n                // ignore (we do our own whitespace formatting)\n            } else if (token.type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n                formattedQuery = _this.formatLineComment(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].BLOCK_COMMENT) {\n                formattedQuery = _this.formatBlockComment(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL) {\n                formattedQuery = _this.formatToplevelReservedWord(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED_NEWLINE) {\n                formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED) {\n                formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n                formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n                formattedQuery = _this.formatClosingParentheses(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].PLACEHOLDER) {\n                formattedQuery = _this.formatPlaceholder(token, formattedQuery);\n            } else if (token.value === \",\") {\n                formattedQuery = _this.formatComma(token, formattedQuery);\n            } else if (token.value === \":\") {\n                formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);\n            } else if (token.value === \".\") {\n                formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);\n            } else if (token.value === \";\") {\n                formattedQuery = _this.formatQuerySeparator(token, formattedQuery);\n            } else {\n                formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n            }\n        });\n        return formattedQuery;\n    };\n\n    Formatter.prototype.formatLineComment = function formatLineComment(token, query) {\n        return this.addNewline(query + token.value);\n    };\n\n    Formatter.prototype.formatBlockComment = function formatBlockComment(token, query) {\n        return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n    };\n\n    Formatter.prototype.indentComment = function indentComment(comment) {\n        return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n    };\n\n    Formatter.prototype.formatToplevelReservedWord = function formatToplevelReservedWord(token, query) {\n        this.indentation.decreaseTopLevel();\n\n        query = this.addNewline(query);\n\n        this.indentation.increaseToplevel();\n\n        query += this.equalizeWhitespace(token.value);\n        return this.addNewline(query);\n    };\n\n    Formatter.prototype.formatNewlineReservedWord = function formatNewlineReservedWord(token, query) {\n        return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n    };\n\n    // Replace any sequence of whitespace characters with single space\n\n\n    Formatter.prototype.equalizeWhitespace = function equalizeWhitespace(string) {\n        return string.replace(/\\s+/g, \" \");\n    };\n\n    // Opening parentheses increase the block indent level and start a new line\n\n\n    Formatter.prototype.formatOpeningParentheses = function formatOpeningParentheses(token, query) {\n        // Take out the preceding space unless there was whitespace there in the original query\n        // or another opening parens or line comment\n        var preserveWhitespaceFor = [_tokenTypes2[\"default\"].WHITESPACE, _tokenTypes2[\"default\"].OPEN_PAREN, _tokenTypes2[\"default\"].LINE_COMMENT];\n        if (!preserveWhitespaceFor.includes(this.previousToken().type)) {\n            query = (0, _trimEnd2[\"default\"])(query);\n        }\n        query += token.value;\n\n        this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n        if (!this.inlineBlock.isActive()) {\n            this.indentation.increaseBlockLevel();\n            query = this.addNewline(query);\n        }\n        return query;\n    };\n\n    // Closing parentheses decrease the block indent level\n\n\n    Formatter.prototype.formatClosingParentheses = function formatClosingParentheses(token, query) {\n        if (this.inlineBlock.isActive()) {\n            this.inlineBlock.end();\n            return this.formatWithSpaceAfter(token, query);\n        } else {\n            this.indentation.decreaseBlockLevel();\n            return this.formatWithSpaces(token, this.addNewline(query));\n        }\n    };\n\n    Formatter.prototype.formatPlaceholder = function formatPlaceholder(token, query) {\n        return query + this.params.get(token) + \" \";\n    };\n\n    // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n\n\n    Formatter.prototype.formatComma = function formatComma(token, query) {\n        query = this.trimTrailingWhitespace(query) + token.value + \" \";\n\n        if (this.inlineBlock.isActive()) {\n            return query;\n        } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n            return query;\n        } else {\n            return this.addNewline(query);\n        }\n    };\n\n    Formatter.prototype.formatWithSpaceAfter = function formatWithSpaceAfter(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \" \";\n    };\n\n    Formatter.prototype.formatWithoutSpaces = function formatWithoutSpaces(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value;\n    };\n\n    Formatter.prototype.formatWithSpaces = function formatWithSpaces(token, query) {\n        return query + token.value + \" \";\n    };\n\n    Formatter.prototype.formatQuerySeparator = function formatQuerySeparator(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \"\\n\";\n    };\n\n    Formatter.prototype.addNewline = function addNewline(query) {\n        return (0, _trimEnd2[\"default\"])(query) + \"\\n\" + this.indentation.getIndent();\n    };\n\n    Formatter.prototype.trimTrailingWhitespace = function trimTrailingWhitespace(query) {\n        if (this.previousNonWhitespaceToken().type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n            return (0, _trimEnd2[\"default\"])(query) + \"\\n\";\n        } else {\n            return (0, _trimEnd2[\"default\"])(query);\n        }\n    };\n\n    Formatter.prototype.previousNonWhitespaceToken = function previousNonWhitespaceToken() {\n        var n = 1;\n        while (this.previousToken(n).type === _tokenTypes2[\"default\"].WHITESPACE) {\n            n++;\n        }\n        return this.previousToken(n);\n    };\n\n    Formatter.prototype.previousToken = function previousToken() {\n        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n        return this.tokens[this.index - offset] || {};\n    };\n\n    return Formatter;\n}();\n\nexports[\"default\"] = Formatter;\nmodule.exports = exports[\"default\"];"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/sql-formatter/lib/core/Formatter.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}}],"sources":{"../node_modules/sql-formatter/lib/core/Formatter.js":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _trimEnd = require(\"lodash/trimEnd\");\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _tokenTypes = require(\"./tokenTypes\");\n\nvar _tokenTypes2 = _interopRequireDefault(_tokenTypes);\n\nvar _Indentation = require(\"./Indentation\");\n\nvar _Indentation2 = _interopRequireDefault(_Indentation);\n\nvar _InlineBlock = require(\"./InlineBlock\");\n\nvar _InlineBlock2 = _interopRequireDefault(_InlineBlock);\n\nvar _Params = require(\"./Params\");\n\nvar _Params2 = _interopRequireDefault(_Params);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Formatter = function () {\n    /**\n     * @param {Object} cfg\n     *   @param {Object} cfg.indent\n     *   @param {Object} cfg.params\n     * @param {Tokenizer} tokenizer\n     */\n    function Formatter(cfg, tokenizer) {\n        _classCallCheck(this, Formatter);\n\n        this.cfg = cfg || {};\n        this.indentation = new _Indentation2[\"default\"](this.cfg.indent);\n        this.inlineBlock = new _InlineBlock2[\"default\"]();\n        this.params = new _Params2[\"default\"](this.cfg.params);\n        this.tokenizer = tokenizer;\n        this.previousReservedWord = {};\n        this.tokens = [];\n        this.index = 0;\n    }\n\n    /**\n     * Formats whitespaces in a SQL string to make it easier to read.\n     *\n     * @param {String} query The SQL query string\n     * @return {String} formatted query\n     */\n\n\n    Formatter.prototype.format = function format(query) {\n        this.tokens = this.tokenizer.tokenize(query);\n        var formattedQuery = this.getFormattedQueryFromTokens();\n\n        return formattedQuery.trim();\n    };\n\n    Formatter.prototype.getFormattedQueryFromTokens = function getFormattedQueryFromTokens() {\n        var _this = this;\n\n        var formattedQuery = \"\";\n\n        this.tokens.forEach(function (token, index) {\n            _this.index = index;\n\n            if (token.type === _tokenTypes2[\"default\"].WHITESPACE) {\n                // ignore (we do our own whitespace formatting)\n            } else if (token.type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n                formattedQuery = _this.formatLineComment(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].BLOCK_COMMENT) {\n                formattedQuery = _this.formatBlockComment(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED_TOPLEVEL) {\n                formattedQuery = _this.formatToplevelReservedWord(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED_NEWLINE) {\n                formattedQuery = _this.formatNewlineReservedWord(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].RESERVED) {\n                formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n                _this.previousReservedWord = token;\n            } else if (token.type === _tokenTypes2[\"default\"].OPEN_PAREN) {\n                formattedQuery = _this.formatOpeningParentheses(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].CLOSE_PAREN) {\n                formattedQuery = _this.formatClosingParentheses(token, formattedQuery);\n            } else if (token.type === _tokenTypes2[\"default\"].PLACEHOLDER) {\n                formattedQuery = _this.formatPlaceholder(token, formattedQuery);\n            } else if (token.value === \",\") {\n                formattedQuery = _this.formatComma(token, formattedQuery);\n            } else if (token.value === \":\") {\n                formattedQuery = _this.formatWithSpaceAfter(token, formattedQuery);\n            } else if (token.value === \".\") {\n                formattedQuery = _this.formatWithoutSpaces(token, formattedQuery);\n            } else if (token.value === \";\") {\n                formattedQuery = _this.formatQuerySeparator(token, formattedQuery);\n            } else {\n                formattedQuery = _this.formatWithSpaces(token, formattedQuery);\n            }\n        });\n        return formattedQuery;\n    };\n\n    Formatter.prototype.formatLineComment = function formatLineComment(token, query) {\n        return this.addNewline(query + token.value);\n    };\n\n    Formatter.prototype.formatBlockComment = function formatBlockComment(token, query) {\n        return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n    };\n\n    Formatter.prototype.indentComment = function indentComment(comment) {\n        return comment.replace(/\\n/g, \"\\n\" + this.indentation.getIndent());\n    };\n\n    Formatter.prototype.formatToplevelReservedWord = function formatToplevelReservedWord(token, query) {\n        this.indentation.decreaseTopLevel();\n\n        query = this.addNewline(query);\n\n        this.indentation.increaseToplevel();\n\n        query += this.equalizeWhitespace(token.value);\n        return this.addNewline(query);\n    };\n\n    Formatter.prototype.formatNewlineReservedWord = function formatNewlineReservedWord(token, query) {\n        return this.addNewline(query) + this.equalizeWhitespace(token.value) + \" \";\n    };\n\n    // Replace any sequence of whitespace characters with single space\n\n\n    Formatter.prototype.equalizeWhitespace = function equalizeWhitespace(string) {\n        return string.replace(/\\s+/g, \" \");\n    };\n\n    // Opening parentheses increase the block indent level and start a new line\n\n\n    Formatter.prototype.formatOpeningParentheses = function formatOpeningParentheses(token, query) {\n        // Take out the preceding space unless there was whitespace there in the original query\n        // or another opening parens or line comment\n        var preserveWhitespaceFor = [_tokenTypes2[\"default\"].WHITESPACE, _tokenTypes2[\"default\"].OPEN_PAREN, _tokenTypes2[\"default\"].LINE_COMMENT];\n        if (!preserveWhitespaceFor.includes(this.previousToken().type)) {\n            query = (0, _trimEnd2[\"default\"])(query);\n        }\n        query += token.value;\n\n        this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n        if (!this.inlineBlock.isActive()) {\n            this.indentation.increaseBlockLevel();\n            query = this.addNewline(query);\n        }\n        return query;\n    };\n\n    // Closing parentheses decrease the block indent level\n\n\n    Formatter.prototype.formatClosingParentheses = function formatClosingParentheses(token, query) {\n        if (this.inlineBlock.isActive()) {\n            this.inlineBlock.end();\n            return this.formatWithSpaceAfter(token, query);\n        } else {\n            this.indentation.decreaseBlockLevel();\n            return this.formatWithSpaces(token, this.addNewline(query));\n        }\n    };\n\n    Formatter.prototype.formatPlaceholder = function formatPlaceholder(token, query) {\n        return query + this.params.get(token) + \" \";\n    };\n\n    // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n\n\n    Formatter.prototype.formatComma = function formatComma(token, query) {\n        query = this.trimTrailingWhitespace(query) + token.value + \" \";\n\n        if (this.inlineBlock.isActive()) {\n            return query;\n        } else if (/^LIMIT$/i.test(this.previousReservedWord.value)) {\n            return query;\n        } else {\n            return this.addNewline(query);\n        }\n    };\n\n    Formatter.prototype.formatWithSpaceAfter = function formatWithSpaceAfter(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \" \";\n    };\n\n    Formatter.prototype.formatWithoutSpaces = function formatWithoutSpaces(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value;\n    };\n\n    Formatter.prototype.formatWithSpaces = function formatWithSpaces(token, query) {\n        return query + token.value + \" \";\n    };\n\n    Formatter.prototype.formatQuerySeparator = function formatQuerySeparator(token, query) {\n        return this.trimTrailingWhitespace(query) + token.value + \"\\n\";\n    };\n\n    Formatter.prototype.addNewline = function addNewline(query) {\n        return (0, _trimEnd2[\"default\"])(query) + \"\\n\" + this.indentation.getIndent();\n    };\n\n    Formatter.prototype.trimTrailingWhitespace = function trimTrailingWhitespace(query) {\n        if (this.previousNonWhitespaceToken().type === _tokenTypes2[\"default\"].LINE_COMMENT) {\n            return (0, _trimEnd2[\"default\"])(query) + \"\\n\";\n        } else {\n            return (0, _trimEnd2[\"default\"])(query);\n        }\n    };\n\n    Formatter.prototype.previousNonWhitespaceToken = function previousNonWhitespaceToken() {\n        var n = 1;\n        while (this.previousToken(n).type === _tokenTypes2[\"default\"].WHITESPACE) {\n            n++;\n        }\n        return this.previousToken(n);\n    };\n\n    Formatter.prototype.previousToken = function previousToken() {\n        var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n        return this.tokens[this.index - offset] || {};\n    };\n\n    return Formatter;\n}();\n\nexports[\"default\"] = Formatter;\nmodule.exports = exports[\"default\"];"},"lineCount":241}},"error":null,"hash":"d98baca7839bd9fdf6aacb71a50df6eb","cacheData":{"env":{}}}