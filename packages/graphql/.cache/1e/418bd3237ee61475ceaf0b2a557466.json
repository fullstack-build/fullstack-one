{"id":"../node_modules/typedi/decorators/Service.js","dependencies":[{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/typedi/decorators/Service.js.map","includedInParent":true,"mtime":1529567102000},{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/package.json","includedInParent":true,"mtime":1581588025807},{"name":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/typedi/package.json","includedInParent":true,"mtime":1580380996280},{"name":"../Container","loc":{"line":3,"column":26},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/typedi/decorators/Service.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/typedi/Container.js"},{"name":"../Token","loc":{"line":4,"column":22},"parent":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/typedi/decorators/Service.js","resolved":"/Users/hex0r/GitHub/fullstack-one/packages/graphql/node_modules/typedi/Token.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Container_1 = require(\"../Container\");\nvar Token_1 = require(\"../Token\");\n/**\n * Marks class as a service that can be injected using container.\n */\nfunction Service(optionsOrServiceName, maybeFactory) {\n    if (arguments.length === 2 || (optionsOrServiceName instanceof Function)) {\n        var serviceId = { service: new Token_1.Token() };\n        var dependencies_1 = arguments.length === 2 ? optionsOrServiceName : [];\n        var factory_1 = arguments.length === 2 ? maybeFactory : optionsOrServiceName;\n        Container_1.Container.set({\n            id: serviceId.service,\n            factory: function (container) {\n                var params = dependencies_1.map(function (dependency) { return container.get(dependency); });\n                return factory_1.apply(void 0, params);\n            }\n        });\n        return serviceId;\n    }\n    else {\n        return function (target) {\n            var service = {\n                type: target\n            };\n            if (typeof optionsOrServiceName === \"string\" || optionsOrServiceName instanceof Token_1.Token) {\n                service.id = optionsOrServiceName;\n                service.multiple = optionsOrServiceName.multiple;\n                service.global = optionsOrServiceName.global || false;\n                service.transient = optionsOrServiceName.transient;\n            }\n            else if (optionsOrServiceName) { // ServiceOptions\n                service.id = optionsOrServiceName.id;\n                service.factory = optionsOrServiceName.factory;\n                service.multiple = optionsOrServiceName.multiple;\n                service.global = optionsOrServiceName.global || false;\n                service.transient = optionsOrServiceName.transient;\n            }\n            Container_1.Container.set(service);\n        };\n    }\n}\nexports.Service = Service;\n\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/decorators/Service.ts"],"names":[],"mappings":";;AAAA,0CAAuC;AAEvC,kCAA+B;AAuE/B;;GAEG;AACH,iBAA8C,oBAA+E,EAAE,YAAsC;IACjK,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,oBAAoB,YAAY,QAAQ,CAAC,EAAE;QACtE,IAAM,SAAS,GAAG,EAAE,OAAO,EAAE,IAAI,aAAK,EAAK,EAAE,CAAC;QAC9C,IAAM,cAAY,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,oBAA6B,CAAC,CAAC,CAAC,EAAE,CAAC;QACjF,IAAM,SAAO,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,oBAAgC,CAAC;QAEzF,qBAAS,CAAC,GAAG,CAAC;YACV,EAAE,EAAE,SAAS,CAAC,OAAO;YACrB,OAAO,EAAE,UAAC,SAA4B;gBAClC,IAAM,MAAM,GAAG,cAAY,CAAC,GAAG,CAAC,UAAA,UAAU,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAzB,CAAyB,CAAC,CAAC;gBACzE,OAAO,SAAO,eAAI,MAAM,EAAE;YAC9B,CAAC;SACJ,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;KAEpB;SAAM;QACH,OAAO,UAAS,MAAgB;YAE5B,IAAM,OAAO,GAA0B;gBACnC,IAAI,EAAE,MAAM;aACf,CAAC;YAEF,IAAI,OAAO,oBAAoB,KAAK,QAAQ,IAAI,oBAAoB,YAAY,aAAK,EAAE;gBACnF,OAAO,CAAC,EAAE,GAAG,oBAAoB,CAAC;gBAClC,OAAO,CAAC,QAAQ,GAAI,oBAA6C,CAAC,QAAQ,CAAC;gBAC3E,OAAO,CAAC,MAAM,GAAI,oBAA6C,CAAC,MAAM,IAAI,KAAK,CAAC;gBAChF,OAAO,CAAC,SAAS,GAAI,oBAA6C,CAAC,SAAS,CAAC;aAEhF;iBAAM,IAAI,oBAAoB,EAAE,EAAE,iBAAiB;gBAChD,OAAO,CAAC,EAAE,GAAI,oBAA6C,CAAC,EAAE,CAAC;gBAC/D,OAAO,CAAC,OAAO,GAAI,oBAA6C,CAAC,OAAO,CAAC;gBACzE,OAAO,CAAC,QAAQ,GAAI,oBAA6C,CAAC,QAAQ,CAAC;gBAC3E,OAAO,CAAC,MAAM,GAAI,oBAA6C,CAAC,MAAM,IAAI,KAAK,CAAC;gBAChF,OAAO,CAAC,SAAS,GAAI,oBAA6C,CAAC,SAAS,CAAC;aAChF;YAED,qBAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC;KACL;AACL,CAAC;AAxCD,0BAwCC","file":"Service.js","sourcesContent":["import {Container} from \"../Container\";\nimport {ContainerInstance} from \"../ContainerInstance\";\nimport {Token} from \"../Token\";\nimport {ServiceMetadata} from \"../types/ServiceMetadata\";\nimport {ServiceOptions} from \"../types/ServiceOptions\";\n\n\nexport type ObjectType<T1> = { new (...args: any[]): T1 } | { service: T1 };\n\nexport function Service<R>(\n    factory: () => R\n): { service: R };\nexport function Service<R, T1>(\n    dependencies: [ObjectType<T1>],\n    factory: (dependency1: T1) => R\n): { service: R };\nexport function Service<R, T1, T2>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>],\n    factory: (dependency1: T1, dependency2: T2) => R\n): { service: R };\nexport function Service<R, T1, T2, T3>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7, T8>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>, ObjectType<T8>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7, dependency8: T8) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>, ObjectType<T8>, ObjectType<T9>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7, dependency8: T8, dependency9: T9) => R\n): { service: R };\nexport function Service<R, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    dependencies: [ObjectType<T1>, ObjectType<T2>, ObjectType<T3>, ObjectType<T4>, ObjectType<T5>, ObjectType<T6>, ObjectType<T7>, ObjectType<T8>, ObjectType<T9>, ObjectType<T10>],\n    factory: (dependency1: T1, dependency2: T2, dependency3: T3, dependency4: T4, dependency5: T5, dependency6: T6, dependency7: T7, dependency8: T8, dependency9: T9, dependency10: T10) => R\n): { service: R };\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(name: string): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service(token: Token<any>): Function;\n\n/**\n * Marks class as a service that can be injected using Container.\n */\nexport function Service<T, K extends keyof T>(options?: ServiceOptions<T, K>): Function;\n\n/**\n * Marks class as a service that can be injected using container.\n */\nexport function Service<T, K extends keyof T>(optionsOrServiceName?: ServiceOptions<T, K>|Token<any>|string|any[]|(() => any), maybeFactory?: (...args: any[]) => any): any {\n    if (arguments.length === 2 || (optionsOrServiceName instanceof Function)) {\n        const serviceId = { service: new Token<T>() };\n        const dependencies = arguments.length === 2 ? optionsOrServiceName as any[] : [];\n        const factory = arguments.length === 2 ? maybeFactory : optionsOrServiceName as Function;\n\n        Container.set({\n            id: serviceId.service,\n            factory: (container: ContainerInstance) => {\n                const params = dependencies.map(dependency => container.get(dependency));\n                return factory(...params);\n            }\n        });\n\n        return serviceId;\n\n    } else {\n        return function(target: Function) {\n\n            const service: ServiceMetadata<T, K> = {\n                type: target\n            };\n\n            if (typeof optionsOrServiceName === \"string\" || optionsOrServiceName instanceof Token) {\n                service.id = optionsOrServiceName;\n                service.multiple = (optionsOrServiceName as ServiceOptions<T, K>).multiple;\n                service.global = (optionsOrServiceName as ServiceOptions<T, K>).global || false;\n                service.transient = (optionsOrServiceName as ServiceOptions<T, K>).transient;\n\n            } else if (optionsOrServiceName) { // ServiceOptions\n                service.id = (optionsOrServiceName as ServiceOptions<T, K>).id;\n                service.factory = (optionsOrServiceName as ServiceOptions<T, K>).factory;\n                service.multiple = (optionsOrServiceName as ServiceOptions<T, K>).multiple;\n                service.global = (optionsOrServiceName as ServiceOptions<T, K>).global || false;\n                service.transient = (optionsOrServiceName as ServiceOptions<T, K>).transient;\n            }\n\n            Container.set(service);\n        };\n    }\n}\n"],"sourceRoot":".."}},"error":null,"hash":"b5f5a1f42ad60d4c506f14ba58514c00","cacheData":{"env":{}}}